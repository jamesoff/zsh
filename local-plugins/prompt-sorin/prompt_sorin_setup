# vim: ft=zsh
#
# Based on work by:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

#
# 16 Terminal Colors
# -- ---------------
#  0 black
#  1 red
#  2 green
#  3 yellow
#  4 blue
#  5 magenta
#  6 cyan
#  7 white
#  8 bright black
#  9 bright red
# 10 bright green
# 11 bright yellow
# 12 bright blue
# 13 bright magenta
# 14 bright cyan
# 15 bright white
#

setopt TRANSIENT_RPROMPT

# Average prompt length computed with:
function prompt_calculate_max() {
	fc -R
	fc -l 0 | awk '
	BEGIN { count = 0; sum = 0 }
	{
		$1 = ""
		count = count + 1
		sum = sum + length($0)
	}
	END { printf "%.0f", sum/count }
	'
}

_prompt_sorin_average_cache="${TMPDIR:-/tmp}/zsh-prompt-average-$UID"
if [[ ! -o extendedglob ]]; then
	setopt extendedglob
	_need_glob_off=1
fi

if [[ ! -f "$_prompt_sorin_average_cache" ]]; then
	PROMPT_AVERAGE=$(prompt_calculate_max)
	typeset -p PROMPT_AVERAGE >! $_prompt_sorin_average_cache
	_zsh_load_info="$_zsh_load_info\nprompt average calculated"
elif [[ -n $_prompt_sorin_average_cache(#qN.mh+24) ]]; then
	PROMPT_AVERAGE=$(prompt_calculate_max)
	typeset -p PROMPT_AVERAGE >! $_prompt_sorin_average_cache
	_zsh_load_info="$_zsh_load_info\nprompt average calculated"
else
	alias typeset='typeset -g'
	source "$_prompt_sorin_average_cache"
	unalias typeset
	_zsh_load_info="$_zsh_load_info\nprompt average cached"
fi

if [[ -n $_need_glob_off ]]; then
	setopt noextendedglob
	unset _need_glob_off
fi

function prompt_space() {
	# Returns maximum length of command prompt which leaves space for average length command, based on current terminal width
	local max
	max=$(( $(tput cols) - $PROMPT_AVERAGE ))
	if [[ $max < 0 ]]; then
		max=0
	fi
	echo $max
}
HOSTNAME=$(hostname -s)
export HOSTCOLOUR=$(string_hash $HOSTNAME:l 7)

padlock_character=" "
vpn_character=" "
yahoo_character=" "
# Line break in here is on purpose
#PROMPT='%{$reset_color%}%n%{$fg[white]%}@%{%F{$HOSTCOLOUR}%}$HOSTNAME$SCR_WINDOW$SCR_COLOR:%{$fg[blue]%}%~%{$reset_color%}$(git_prompt_info)$(svn_prompt_info) %(0?,,%{$fg[red]%}%?!%{$reset_color%} )%(!.%{$fg[red]%}.%{$fg[green]%})%($(prompt_space)l.
#.)%#%{$reset_color%} '

function prompt_jms_pwd {
	local pwd=$( print -P %~ )

	if [[ $_prompt_sorin_last_pwd != $pwd ]]; then
		# Match / or ~ alone
		if [[ "$pwd" == (#m)[/~] ]]; then
			_prompt_sorin_pwd="%F{254}$MATCH"
			unset MATCH
		else
			#_prompt_sorin_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
			prompt_bits=(${(@s:/:)pwd})
			colour_code=$(( 255 - ( 2 * ${#prompt_bits} ) ))
			if [[ $colour_code < 240 ]]; then
				colour_code=240
			fi
			declare prompt_string=""
			if [[ "$pwd" == /* ]]; then
				prompt_string="%F{$colour_code}/"
			fi
			for d in $prompt_bits; do
				prompt_string="${prompt_string}%F{$colour_code}$d/"
				(( colour_code += 2 ))
				if [[ $colour_code > 255 ]]; then
					colour_code=255
				fi
			done

			# Remove trailing /
			_prompt_sorin_pwd="${prompt_string%/}"
		fi
	fi
	_prompt_sorin_last_pwd="$pwd"
}

function prompt_sorin_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_sorin_pwd="$MATCH"
    unset MATCH
  else
    _prompt_sorin_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
  fi
}

function prompt_sorin_git_info {
  if (( _prompt_sorin_precmd_async_pid > 0 )); then
    # Append Git status.
    if [[ -s "$_prompt_sorin_precmd_async_data" ]]; then
      alias typeset='typeset -g'
      source "$_prompt_sorin_precmd_async_data"
      RPROMPT+='${git_info:+${(e)git_info[status]}}'
      unalias typeset
    fi

    # Reset PID.
    _prompt_sorin_precmd_async_pid=0

    # Redisplay prompt.
    zle && zle reset-prompt
  fi
}

function prompt_sorin_precmd_async {
  if klist -t -c "$KRB5CCNAME" 2> /dev/null; then
      _prompt_sorin_krb_status="${padlock_character}"
  else
      _prompt_sorin_krb_status=''
  fi
  typeset -p _prompt_sorin_krb_status >! "$_prompt_sorin_precmd_async_data"

  if [[ $USER == "jseward" && -z $TMUX ]]; then
	  if netstat -rn -f inet | grep gpd0 >/dev/null; then
		  _prompt_sorin_vpn_status="$vpn_character"
	  else
		  _prompt_sorin_vpn_status=""
	  fi
	  typeset -p _prompt_sorin_vpn_status >>! "$_prompt_sorin_precmd_async_data"
  fi

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
    typeset -p git_info >>! "$_prompt_sorin_precmd_async_data"
  fi

  if [[ $SSH_AUTH_SOCK =~ yubiagent ]]; then
	  _prompt_sorin_yubi_status="$yahoo_character"
	  typeset -p _prompt_sorin_yubi_status >>! "$_prompt_sorin_precmd_async_data"
  fi

  # Signal completion to parent process.
  kill -WINCH $$
}

function prompt_sorin_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  #prompt_sorin_pwd
  prompt_jms_pwd

  # Define prompts.
  RPROMPT='%(?:: %F{1} $? %f)${_prompt_sorin_krb_status}${_prompt_sorin_vpn_status}${_prompt_sorin_yubi_status:+"%F{93}$_prompt_sorin_yubi_status%f"}${AWS_PROFILE:+"%F{3} $AWS_PROFILE%f "}${AWS_DEFAULT_REGION:+"%F{6}$AWS_DEFAULT_REGION%f%b "}${editor_info[overwrite]}${VIRTUAL_ENV:+"%F{5} ${VIRTUAL_ENV:t} "}'

  # Kill the old process of slow commands if it is still running.
  if (( _prompt_sorin_precmd_async_pid > 0 )); then
    kill -KILL "$_prompt_sorin_precmd_async_pid" &>/dev/null
  fi

  # Compute slow commands in the background.
  trap prompt_sorin_git_info WINCH
  prompt_sorin_precmd_async &!
  _prompt_sorin_precmd_async_pid=$!
}

function prompt_sorin_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)
  _prompt_sorin_precmd_async_pid=0
  #_prompt_sorin_precmd_async_data="${TMPPREFIX}-prompt_sorin_data-$$"
  tmpdir=${TMPDIR:-/tmp/}
  _prompt_sorin_precmd_async_data=$( mktemp "${tmpdir}/zsh-prompt-XXXXX" )

  # prune prompt files older than an hour
  rm -f "${tmpdir}/zsh-prompt-*(mh+1)"

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_sorin_precmd

  # Add hook to try to tidy up data file
  add-zsh-hook zshexit prompt_sorin_tidy

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ' %B%F{1}❯%F{3}❯%F{2}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{3}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{2}❮%F{3}❮%F{1}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '%F{7}:%f%%B%F{9}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format ' %%B%F{2}%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{13}%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{13}%f%%b'
  zstyle ':prezto:module:git:info:branch' format ' %%B%F{2}%b%f%%b'
  zstyle ':prezto:module:git:info:commit' format ' %%B%F{3}%.7c%f%%b'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{1}%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{4}%f%%b'
  zstyle ':prezto:module:git:info:position' format ' %%B%F{13}%p%f%%b'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{5}%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{6}%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{3}%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{7}%f%%b'
  zstyle ':prezto:module:git:info:keys' format \
    'status' '$(coalesce "%b" "%p" "%c")%s%A%B%S%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='${SSH_TTY:+"%F{9}%n%f%F{7}@%f%F{$HOSTCOLOUR}%m%f "}%F{4}${_prompt_sorin_pwd} %($(prompt_space)l.
.)${VIM:+"%B%F{1} %f%b"}%(!. %B%F{1}#%f%b.)${editor_info[keymap]} '
  RPROMPT=''
  SPROMPT='zsh: correct %F{1}%R%f to %F{2}%r%f [nyae]? '
}

function prompt_sorin_preview {
  local +h PROMPT=''
  local +h RPROMPT=''
  local +h SPROMPT=''

  editor-info 2>/dev/null
  prompt_preview_theme 'sorin'
}

function prompt_sorin_tidy {
  [ -f "$_prompt_sorin_precmd_async_data" ] && rm -f "$_prompt_sorin_precmd_async_data"
}

prompt_sorin_setup "$@"
