#compdef sshakr

local curcontext="$curcontext" state line
typeset -A opt_args

_arguments -C \
  ':cmd:->cmds' \
  '*:: :->args'

case "$state" in
  (cmds)
    local commands
    commands=(
		'audit:Audit EC2 key pairs'
		'help:Display help'
		'ping:Test connectivity to an AWS Jumphost'
		'rdp:Establish an RDP tunnel to a Windows host via ssh through Jumphost'
		'rotate:Rotate an ssh keypair'
		'scp:SCP through AWS Jumphost'
		'ssh:SSH through AWS Jumphost'
		'write_key:Upload an existing ssh keypair'
    )
    _describe -t commands 'command' commands
    ;;
  (args)
    case $line[1] in
      (ssh)
		local -a options
		options=(
			'-h:display help'
			'-a:AWS account id'
			'-r:AWS region'
			'-J:jumphost'
			'-k:use remote keypair'
			'-l:use local keypair'
			'-L:use remote keypair and save locally'
			'-v:increase output verbosity'
		)
		local -a arguments
		arguments=('t:target user and hostname')
		#_describe 'options' options -- 'target' arguments
		_arguments \
			'*-v[increase output verbosity]' \
			'-a[AWS account id]: ' \
			'-r[AWS region]: ' \
			'-J[jumphost]: ' \
			'(-l -L)-k[use remote keypair]: ' \
			'(-k -L)-l[use local keypair]:keypair:->keypairs' \
			'(-k -l)-L[use remote keypair and save locally]: ' \
			'(-):user and hostname:->userhost' \
			':remote command:'
		case $state in
			(keypairs)
				local -a keypairs
				keypairs=($( ls ~/.ssh/**/*.pem ))
				_values 'keypair' ${keypairs[@]:t:r}
				;;
			(userhost)
				typeset -a users
				users=('ec2-user:' 'root:')
				_describe 'userhost' users -S '@'
				;;
		esac
		;;
    esac
    ;;
esac

return 0
