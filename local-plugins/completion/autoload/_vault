#compdef vault

local curcontext="$curcontext" state line
typeset -A opt_args

_arguments -C \
  '1:cmd:->cmds' \
  '*:: :->args'

case "$state" in
  (cmds)
    local commands
    commands=(
      'delete:Delete operation on secrets in Vault'
      'path-help:Look up the help for a path'
      'read:Read data or secrets from Vault'
      'renew:Renew the lease of a secret'
      'revoke:Revoke a secret.'
      'server:Start a Vault server'
      'status:Outputs status of whether Vault is sealed and if HA mode is enabled'
      'unwrap:Unwrap a wrapped secret'
      'write:Write secrets or configuration into Vault'
      'audit-disable:Disable an audit backend'
      'audit-enable:Enable an audit backend'
      'audit-list:Lists enabled audit backends in Vault'
      'auth:Prints information about how to authenticate with Vault'
      'auth-disable:Disable an auth provider'
      'auth-enable:Enable a new auth provider'
      'capabilities:Fetch the capabilities of a token on a given path'
      'generate-root:Generates a new root token'
      'init:Initialize a new Vault server'
      'key-status:Provides information about the active encryption key'
      'list:List data or secrets in Vault'
      'mount:Mount a logical backend'
      'mount-tune:Tune mount configuration parameters'
      'mounts:Lists mounted backends in Vault'
      'policies:List the policies on the server'
      'policy-delete:Delete a policy from the server'
      'policy-write:Write a policy to the server'
      'rekey:Rekeys Vault to generate new unseal keys'
      'remount:Remount a secret backend to a new path'
      'rotate:Rotates the backend encryption key used to persist data'
      'seal:Seals the vault server'
      'ssh:Initiate a SSH session'
      'step-down:Force the Vault node to give up active duty'
      'token-create:Create a new auth token'
      'token-lookup:Display information about the specified token'
      'token-renew:Renew an auth token if there is an associated lease'
      'token-revoke:Revoke one or more auth tokens'
      'unmount:Unmount a secret backend'
      'unseal:Unseals the vault server'
      'version:Prints the Vault version'
    )
    _describe -t commands 'command' commands
    ;;
  (args)
    case $line[1] in
      (list)
        local paths
        local retpaths=()

        # get input so far
        if [[ -z $line[2] ]]; then
          search_path="secret"
        else
          search_path=$line[2]
          if [[ $search_path =~ '/[^/]+$' ]]; then
            # remove any partial typing for searching
            search_path=$( dirname "$search_path" )
          fi
        fi

        # strip trailing / off the end for consistency later
        search_path=${search_path%/}

        # query vault for values under here
        paths=("${(@f)$(vault list -format json "$search_path" 2> /dev/null | jq -r '.[]')}")
        for i in $paths; do
          if [[ $i[-1] == '/' ]]; then
            retpaths+=("$search_path/${i%/}")
          fi
        done
        #_describe -t path 'path' retpaths
        _values -s / path $retpaths
        ;;
      (read)
        local paths
        local retpaths=()
        local retkeys=()

        # get input so far
        if [[ -z $line[2] ]]; then
          search_path="secret"
        else
          search_path=$line[2]
          if [[ $search_path =~ '/[^/]+$' ]]; then
            # remove any partial typing for searching
            search_path=$( dirname "$search_path" )
          fi
        fi

        # strip trailing / off the end for consistency later
        search_path=${search_path%/}

        # query vault for values under here
        paths=("${(@f)$(vault list -format json "$search_path" 2> /dev/null | jq -r '.[]')}")
        for i in $paths; do
          retpaths+=("$search_path/$i")
        done
        _values -s / key $retpaths
        ;;
    esac
    ;;
esac

return 0
